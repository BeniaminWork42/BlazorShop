@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthStateProvider
@inject ICartService CartService
@implements IDisposable

<PageTitle>Blazor Shop</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row">
            <AuthorizeView>
                <NotAuthorized>
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                    <NavLink class="nav-link" href="register">
                        <span class="oi oi-share-boxed" aria-hidden="true"></span> Register
                    </NavLink>
                </NotAuthorized>

                <Authorized>
                    Welcome @username
                    <NavLink href="cart" class="nav-link">
                        <i class="oi oi-cart"></i>
                        Cart (<span>@counts</span>)
                    </NavLink>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
<BlazoredToasts />

@code {
    private string username { get; set; }
    protected int counts { get; set; }

    protected async override Task OnInitializedAsync()
    {
        CartService.OnChange += StateHasChanged;

        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        username = user.Claims.FirstOrDefault(x => x.Type == "unique_name").Value;

        counts = await GetCartCount();
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private async Task<int> GetCartCount()
    {
        var cart = await CartService.GetCartCounts();
        return cart > 0 ? cart : 0;
    }
}
