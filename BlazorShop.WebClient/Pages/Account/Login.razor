@page "/login"

@inject IAuthenticationService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<div class="auth-page">
    <div class="container page">
        <div class="row">
            <div class="col-md-6 offset-md-3 col-xs-12">
                <h1 class="mb-3 text-xs-center">Sign in</h1>
                <form>
                    <fieldset class="mt-3 form-group">
                        <input class="form-control form-control-lg" type="email" placeholder="Email" @bind="_loginCommand.Email" />
                    </fieldset>
                    @if (emailError.Length > 0)
                    {
                        <div role="alert">
                            <p class="alert alert-danger">@emailError</p>
                        </div>
                    }
                    <fieldset class="mt-4 form-group">
                        <input class="form-control form-control-lg mb-3" type="@TxtType" placeholder="Password" @bind="_loginCommand.Password" />
                        <span>
                            <input type="checkbox" @onclick="ShowPassword"> Show Password
                        </span>
                    </fieldset>
                    @if (passwordError.Length > 0)
                    {
                        <div role="alert">
                            <p class="alert alert-danger">@passwordError</p>
                        </div>
                    }
                    <fieldset class="mt-3 text-xs-center">
                        <a href="reset-password"><strong>Forgot your password?</strong></a>
                    </fieldset>
                    <button class="mt-3 btn btn-lg btn-primary pull-xs-right" type="button" @onclick="ExecuteLogin">
                        Login
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginCommand _loginCommand = new();

    public string TxtType = "password";

    private string emailError = "";
    private string passwordError = "";

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    public void ShowPassword() 
    {
        if(TxtType== "password")
        {
            TxtType = "text";
        }
        else
        {
            TxtType = "password";
        }
    }

    private async Task ExecuteLogin()
    {
        if (CheckFormValidation())
        {
            var result = await AuthService.Login(_loginCommand);
            if (result is not null)
            {
                NavManager.NavigateTo("/");
            }
        }
    }

    private bool CheckFormValidation()
    {
        var isValid = true;
        emailError = ""; passwordError = "";

        if (_loginCommand.Email == null || _loginCommand.Email?.Trim().Length < 6)
        {
            emailError = "The email must contain at least 6 characters.";
            isValid = false;
        }
        else if (!new EmailAddressAttribute().IsValid(_loginCommand.Email?.Trim()))
        {
            emailError = "The email must be a valid email address.";
            isValid = false;
        }
        if (_loginCommand.Password == null || _loginCommand.Password?.Trim().Length < 6)
        {
            passwordError = "The password must contain at least 6 characters.";
            isValid = false;
        }

        return isValid;
    }
}

<style>
   .e-input-eye:before {
        content: '\e345';
        font-family: e-icons;
        font-size: 13px;
    }
</style>
