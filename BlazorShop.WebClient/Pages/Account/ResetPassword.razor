@page "/reset-password"

@inject IAccountService AccountService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}

<div class="auth-page">
    <div class="container page">
        <div class="row">
            <div class="col-md-6 offset-md-3 col-xs-12">
                <h1 class="mb-3 text-xs-center">Sign in</h1>
                <form>
                    <fieldset class="mt-3 form-group">
                        <input class="form-control form-control-lg" type="email" placeholder="Email" @bind="resetCommand.Email" />
                    </fieldset>
                    @if (emailError.Length > 0)
                    {
                        <div role="alert">
                            <p class="alert alert-danger">@emailError</p>
                        </div>
                    }
                    <fieldset class="mt-3 form-group">
                        <input class="form-control form-control-lg" type="password" placeholder="Password" @bind="resetCommand.NewPassword" />
                    </fieldset>
                    @if (newPasswordError.Length > 0)
                    {
                        <div role="alert">
                            <p class="alert alert-danger">@newPasswordError</p>
                        </div>
                    }
                    <fieldset class="mt-3 form-group">
                        <input class="form-control form-control-lg" type="password" placeholder="Confirm Password" @bind="resetCommand.NewConfirmPassword" />
                    </fieldset>
                    @if (newConfirmPasswordError.Length > 0)
                    {
                        <div role="alert">
                            <p class="alert alert-danger">@newConfirmPasswordError</p>
                        </div>
                    }
                    <button class="mt-3 btn btn-lg btn-primary pull-xs-right" type="button" @onclick="ExecuteResetPassword">
                        Reset Password
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetPasswordCommand resetCommand = new();

    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";

    private string emailError = "";
    private string newPasswordError = "";
    private string newConfirmPasswordError = "";

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task ExecuteResetPassword()
    {
        showAuthenticationError = false;

        if (CheckFormValidation())
        {
            var result = await AccountService.ResetPassword(resetCommand);
            if (result is not null)
            {
                NavManager.NavigateTo("/login");
            }
            else
            {
                authenticationErrorText = "There was an error when trying to log in.";
                showAuthenticationError = true;
            }
        }
    }

    private bool CheckFormValidation()
    {
        var isValid = true;
        emailError = ""; newPasswordError = ""; newConfirmPasswordError = "";

        if (resetCommand.Email == null || resetCommand.Email?.Trim().Length < 6)
        {
            emailError = "The email must contain at least 6 characters.";
            isValid = false;
        }
        else if (!new EmailAddressAttribute().IsValid(resetCommand.Email?.Trim()))
        {
            emailError = "The email must be a valid email address.";
            isValid = false;
        }
        if (resetCommand.NewPassword == null || resetCommand.NewPassword?.Trim().Length < 6)
        {
            newPasswordError = "The password must contain at least 6 characters.";
            isValid = false;
        }
        if (resetCommand.NewConfirmPassword == null)
        {
            newConfirmPasswordError = "The confirm password must not be empty.";
            isValid = false;
        }
        else if (!resetCommand.NewPassword.Equals(resetCommand.NewConfirmPassword))
        {
            newConfirmPasswordError = "The passwords do not match.";
            isValid = false;
        }

        return isValid;
    }
}
