@page "/reset-password"

@inject IAccountService AccountService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<div>
    <div class="container page">
        <div class="row">
            <div class="col-md-6 offset-md-3 col-xs-12">
                <h1 class="mb-3 text-xs-center">Sign in</h1>

                <EditForm Model="@resetCommand" OnValidSubmit="ExecuteResetPassword">
                    <FluentValidationValidator />

                    <fieldset class="mt-3 form-group">
                        <div>
                            <InputText class="form-control form-control-lg" type="email" placeholder="Email" @bind-Value="resetCommand.Email" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("email")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => resetCommand.Email)" />
                            </div>
                        }
                    </fieldset>
                    <fieldset class="mt-3 form-group">
                        <div>
                            <InputText class="form-control form-control-lg" type="password" placeholder="Password" @bind-Value="resetCommand.NewPassword" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("newpassword") && !x.ToLower().Contains("newconfirmpassword")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => resetCommand.NewPassword)" />
                            </div>
                        }
                    </fieldset>
                    <fieldset class="mt-3 form-group">
                        <div>
                            <InputText class="form-control form-control-lg" type="password" placeholder="Confirm Password" @bind-Value="resetCommand.NewConfirmPassword" />
                        </div>
                        @if (context.GetValidationMessages().Any(x => x.ToLower().Contains("newconfirmpassword")))
                        {
                            <div class="mt-1 alert alert-danger" role="alert">
                                <ValidationMessage For="@(() => resetCommand.NewConfirmPassword)" />
                            </div>
                        }
                    </fieldset>
                    <button class="mt-3 btn btn-lg btn-primary pull-xs-right" type="submit">
                        Reset Password
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private ResetPasswordCommand resetCommand = new();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task ExecuteResetPassword()
    {
        var result = await AccountService.ResetPassword(resetCommand);
        if (result is not null)
        {
            NavManager.NavigateTo("/login");
        }
    }
}
