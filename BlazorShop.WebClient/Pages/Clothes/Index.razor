@page "/clothes"
@attribute [Authorize]

@inject IClotheService ClotheService

<h3>Clothes Shop</h3>

<div class="row">
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search clothe by name"
            @bind="SearchString" @bind:event="oninput" @onkeyup="FilterClothes" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-info" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (clothesList is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (clothesList.Count == 0)
    {
        <div class="d-flex justify-content-center">
            <h4>No record found</h4>
        </div>
    }
    else
    {
        <div class="album py-5">
            <div class="container">
                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                    @foreach (var clothe in clothesList)
                    {
                        <div class="col">
                            <div class="card shadow-sm">
                                <img src="images/clothes/@clothe.ImagePath" class="img-fluid" alt="@clothe.ImageName" />
                                <div class="card-body">
                                    <p class="card-text">@clothe.Name</p>
                                    <p class="card-text">@clothe.Description</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-sm btn-outline-secondary">Add To Cart</button>
                                            <span style="margin-left: 15px;"></span>
                                            <a href='clothes/view/@clothe.Id' class="btn btn-outline-dark" role="button">View Product</a>
                                        </div>
                                    <small class="text-muted">$ @clothe.Price</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    protected List<ClotheResponse> clothesList = new();
    protected List<ClotheResponse> searchClothesData = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetClothes();
    }

    protected async Task GetClothes()
    {
        clothesList = await ClotheService.GetClothes();
        searchClothesData = clothesList;
    }

    protected void FilterClothes()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            clothesList = searchClothesData.Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            clothesList = searchClothesData;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        clothesList = searchClothesData;
    }
}
