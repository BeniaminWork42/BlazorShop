@page "/cart"

@attribute [Authorize(Policy = "Customer")]

@inject AuthenticationStateProvider AuthStateProvider
@inject ICartService CartService
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="body-container px-4 px-lg-0">
    <div class="container text-white py-5 text-center">
        <h1 class="display-4 text-primary">Shopping Cart</h1>
    </div>

    @if (cartItems == null || cartItems.Count <= 0)
    {
        <p class="text-center font-weight-bold display-3">You have no items in your cart.</p>
    }
    else
    {
        <div class="pb-5">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12 bg-white rounded shadow-sm mb-5">
                        <div class="table-responsive p-4">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col" class="border-0 bg-light">
                                            <div class="p-2 px-3 text-uppercase">Product</div>
                                        </th>
                                        <th scope="col" class="border-0 bg-light">
                                            <div class="py-2 text-uppercase">Price</div>
                                        </th>
                                        <th scope="col" class="border-0 bg-light">
                                            <div class="py-2 text-uppercase">Quantity</div>
                                        </th>
                                        <th scope="col" class="border-0 bg-light">
                                            <div class="py-2 text-uppercase">Remove</div>
                                        </th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @foreach (var item in cartItems)
                                    {
                                        <tr>
                                            <th scope="row" class="border-0">
                                                <div class="p-2">
                                                    <img src="images/clothes/@item.ClotheImagePath" alt="@item.ClotheImageName" width="70" class="img-fluid rounded shadow-sm" />
                                                    <div class="ml-3 d-inline-block align-middle">
                                                        <h5 class="mb-0">
                                                            <a href="clothes/view/@item.ClotheId" class="text-dark d-inline-block align-middle">
                                                                @item.ClotheName
                                                            </a>
                                                        </h5>
                                                    </div>
                                                </div>
                                            </th>
                                            <td class="border-0 align-middle">
                                                <strong>$ @item.Price</strong>
                                            </td>
                                            <td class="border-0 align-middle">
                                                <EditForm Model="item">
                                                    <InputNumber Min="1" @bind-Value="item.Amount" class="form-control" style="width: 70px" />
                                                </EditForm>
                                            </td>
                                            <td class="border-0 align-middle">
                                                <button class="btn btn-danger" @onclick="(async () => { await DeleteItem(item.Id); })">
                                                    Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="d-flex flex-row-reverse" style="margin-right: 50px;">
                            <p class="font-weight-bold display-6" style="margin-top: -15px;">
                                <strong>Total: $ @cartItems.Sum(item => item.Price * item.Amount)</strong>
                            </p>
                        </div>
                    </div>

                    <div class="d-flex flex-row-reverse" style="margin-top: -30px;">
                        <button class="btn btn-primary btn-lg" @onclick="PlaceOrder">Procceed to checkout</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private int userId { get; set; }
    List<CartResponse> cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        userId = int.Parse(user.Claims.FirstOrDefault(x => x.Type == "UserId").Value);

        CartService.OnChange += StateHasChanged;
        cartItems = await CartService.GetCarts(userId);
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private async Task DeleteItem(int id)
    {
        await CartService.DeleteCart(id, userId);
        cartItems = await CartService.GetCarts(userId);
    }

    private async Task PlaceOrder()
    {
        string checkoutUrl = await CartService.Checkout(userId);
        NavigationManager.NavigateTo(checkoutUrl, forceLoad: true);
        await CartService.EmptyCart(userId);
    }
}
