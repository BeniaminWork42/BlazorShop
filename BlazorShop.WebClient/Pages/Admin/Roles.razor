@page "/admin/roles"
@attribute [Authorize(Policy = "Admin")]

@inject IRoleService RoleService
@inject NavigationManager NavManager

<h1>Roles List</h1>

<div class="row">
    <div class="col-md-6">
        <a href='admin/roles/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Role
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search role by name"
            @bind="SearchString" @bind:event="oninput" @onkeyup="FilterRoles" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-info" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />

@if (rolesList is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (rolesList.Count > 0)
    {
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
                <tr class="text-center">
                    <th>Name</th>
                    <th>NormalizedName</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var role in rolesList)
                {
                    <tr class="text-center">
                        <td>@role.Name</td>
                        <td>@role.NormalizedName</td>
                        <td>
                            <a href='admin/roles/edit/@role.Id' class="btn btn-outline-dark" role="button">Edit</a>
                            <button class="btn btn-danger" @onclick="(() => { DeleteConfirm(role.Id); ModalShow(); })">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (showModal)
        {
            <div class="modal fade show" id="myModal" style="display:block; margin-top: 150px;" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Delete role</h3>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <h4>Do you want to delete this role?</h4>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" @onclick="(async () => {
                                await DeleteRole(role.Id); ModalOk();
                            })">Delete</button>
                            <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="d-flex justify-content-center">
            <h4>No record found</h4>
        </div>
    }
}

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    protected RoleResponse role = new();
    protected string SearchString { get; set; } = string.Empty;

    protected List<RoleResponse> rolesList = new();
    protected List<RoleResponse> searchRolesData = new();

    protected override async Task OnInitializedAsync()
    {
        await GetRoles();
    }

    protected async Task GetRoles()
    {
        rolesList = await RoleService.GetRoles();
        searchRolesData = rolesList;
    }

    protected void FilterRoles()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            rolesList = searchRolesData.Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            rolesList = searchRolesData;
        }
    }

    protected void DeleteConfirm(int Id)
    {
        role = rolesList.FirstOrDefault(x => x.Id == Id);
    }

    protected async Task DeleteRole(int Id)
    {
        await RoleService.DeleteRole(Id);
        await GetRoles();
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        rolesList = searchRolesData;
    }
}
