@page "/admin/Subscriptions/add"
@page "/admin/Subscriptions/edit/{Id:int}"

@attribute [Authorize(Policy = StringRoleResources.Admin)]

@inject ISubscriptionService SubscriptionService
@inject NavigationManager NavManager

<h1>@Title Subscription</h1>
<hr />

<EditForm Model="@Subscription" OnValidSubmit="SaveSubscription">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="StripeSubscriptionId" class="form-label">Stripe Subscription Id</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="Subscription.StripeSubscriptionId" />
        </div>
        <ValidationMessage For="@(() => Subscription.StripeSubscriptionId)" />
        @if (stripeSubscriptionError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@stripeSubscriptionError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="Subscription.Name" />
        </div>
        <ValidationMessage For="@(() => Subscription.Name)" />
        @if (nameError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@nameError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Price" class="form-label">Price</label>
        <div class="col-md-4">
            <InputNumber class="form-control" Min="1" @bind-Value="Subscription.Price" />
        </div>
        <ValidationMessage For="@(() => Subscription.Price)" />
        @if (priceError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@priceError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Options" class="form-label">Options</label>
        <div class="col-md-4">
            <InputTextArea class="form-control" @bind-Value="Subscription.Options" />
        </div>
        <ValidationMessage For="@(() => Subscription.Options)" />
        @if (optionsError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@optionsError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="ImageName" class="form-label">Image Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="Subscription.ImageName" />
        </div>
        <ValidationMessage For="@(() => Subscription.ImageName)" />
        @if (imageNameError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@imageNameError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="ImagePath" class="form-label">Image Path</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="Subscription.ImagePath" />
        </div>
        <ValidationMessage For="@(() => Subscription.ImagePath)" />
        @if (imagePathError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@imagePathError</p>
            </div>
        }
    </div>

    <div class="form-group" style="margin-bottom: 25px;">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";
    public SubscriptionResponse Subscription = new();

    private string stripeSubscriptionError = "";
    private string imageNameError = "";
    private string imagePathError = "";
    private string nameError = "";
    private string priceError = "";
    private string optionsError = "";

    protected override void OnInitialized() { }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            Subscription = await SubscriptionService.GetSubscription(Id);
        }
    }

    protected async Task SaveSubscription()
    {
        if (CheckFormValidation())
        {
            if (Subscription.Id != 0)
            {
                await SubscriptionService.UpdateSubscription(Subscription);
            }
            else
            {
                await SubscriptionService.AddSubscription(Subscription);
            }
            Cancel();
        }
    }

    public void Cancel()
    {
        NavManager.NavigateTo("/admin/subscriptions");
    }

    private bool CheckFormValidation()
    {
        var isValid = true;
        nameError = ""; priceError = ""; optionsError = "";
        stripeSubscriptionError = ""; imageNameError = ""; imagePathError = "";

        if (Subscription.StripeSubscriptionId == null || Subscription.StripeSubscriptionId?.Trim().Length < 10)
        {
            stripeSubscriptionError = "The stripe Subscription must not be empty (>= 10).";
            isValid = false;
        }
        if (Subscription.Name == null || Subscription.Name?.Trim().Length < 3)
        {
            nameError = "The name must contain at least 3 characters.";
            isValid = false;
        }
        if (Subscription.Price < 1)
        {
            priceError = "The price must be greater than 0.";
            isValid = false;
        }
        else if (!Subscription.Price.ToString().All(char.IsDigit))
        {
            priceError = "The price must be a valid number.";
            isValid = false;            
        }
        if (Subscription.Options == null || Subscription.Options?.Trim().Length < 10)
        {
            optionsError = "The options must contain at least 10 characters.";
            isValid = false;
        }
        if (Subscription.ImageName == null || Subscription.ImageName?.Trim().Length < 5)
        {
            imageNameError = "The image name must contain at least 5 characters.";
            isValid = false;
        }
        if (Subscription.ImagePath == null || Subscription.ImagePath?.Trim().Length < 5)
        {
            imagePathError = "The image path must contain at least 5 characters.";
            isValid = false;
        }

        return isValid;
    }
}
