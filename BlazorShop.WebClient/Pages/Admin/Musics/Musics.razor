@page "/admin/musics"

@attribute [Authorize(Policy = "Admin")]

@inject IMusicService MusicService
@inject NavigationManager NavManager

<h3>Music Songs List</h3>

<MatTable Items="@musicsList" LoadInitialData="true" Striped="true" AllowSelection="true"
    RowClass="tester" FilterByColumnName="Title" DebounceMilliseconds="150" class="mat-elevation-z5">
    <MatTableHeader>
        <th>Id</th>
        <th>Title</th>
        <th>Description</th>
        <th>Author</th>
        <th>DateRelease</th>
        <th>ImageName</th>
        <th>ImagePath</th>
        <th>Actions</th>
    </MatTableHeader>

    <MatTableRow>
        <td class="col-md-1">@String.Format("{0:d}", @context.Id)</td>
        <td class="col-md-2">@context.Title</td>
        <td class="col-md-8">@context.Description</td>
        <td class="col-md-2">@context.Author</td>
        <td class="col-md-2">@context.DateRelease</td>
        <td class="col-md-2">@context.ImageName</td>
        <td class="col-md-2">@context.ImagePath</td>
        <td class="col-md-4">
            <a href='admin/musics/edit/@music.Id' class="btn btn-outline-dark" role="button">Edit</a>
            <br/>
            <button class="btn btn-danger" @onclick="(() => { DeleteConfirm(music.Id); ModalShow(); })">
                Delete
            </button>
        </td>
    </MatTableRow>
</MatTable>

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    protected MusicResponse music = new();
    protected string SearchString { get; set; } = string.Empty;

    protected List<MusicResponse> musicsList = new();
    protected List<MusicResponse> searchMusicsData = new();

    protected override async Task OnInitializedAsync()
    {
        await GetMusics();

        //count = dbContext.Orders.Count();
        //orders = GetOrders(0, pageSize);
    }

    protected async Task GetMusics()
    {
        musicsList = await MusicService.GetMusics();
        searchMusicsData = musicsList;
    }

    protected void FilterClothes()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            musicsList = searchMusicsData.Where(x => x.Title.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            musicsList = searchMusicsData;
        }
    }

    protected void DeleteConfirm(int Id)
    {
        music = musicsList.FirstOrDefault(x => x.Id == Id);
    }

    protected async Task DeleteClothe(int Id)
    {
        //await ClotheService.DeleteClothe(Id);
        await GetMusics();
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        musicsList = searchMusicsData;
    }
}

<style>
    .music-title {
        min-height: 72px;
        color: #da0074;
        background-color: rgba(255, 41, 155, .1);
        font-size: 20px;
        font-weight: bold;
        line-height: 20px;
        letter-spacing: -0.02em;
    }

    label {
        width: 70%;
    }
</style>
