@page "/admin/musics/add"
@page "/admin/musics/edit/{Id:int}"

@attribute [Authorize(Policy = StringRoleResources.Admin)]

@inject IMusicService MusicService
@inject NavigationManager NavManager

<h1>@Title Music</h1>
<hr />

<EditForm Model="@music" OnValidSubmit="SaveMusic">
    <FluentValidationValidator />

    <div class="mb-3">
        <label for="Title" class="form-label">Title</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="music.Title" />
        </div>
        <ValidationMessage For="@(() => music.Title)" />
        @if (titleError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@titleError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Description" class="form-label">Description</label>
        <div class="col-md-4">
            <InputTextArea class="form-control" @bind-Value="music.Description" />
        </div>
        <ValidationMessage For="@(() => music.Description)" />
        @if (descriptionError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@descriptionError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="Author" class="form-label">Author</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="music.Author" />
        </div>
        <ValidationMessage For="@(() => music.Author)" />
        @if (authorError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@authorError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="DateRelease" class="form-label">Date Release</label>
        <div class="col-md-4">
            <MatDatePicker @bind-Value="@music.DateRelease" Format="dd/MM/yyyy"></MatDatePicker>
        </div>
        <ValidationMessage For="@(() => music.DateRelease)" />
        @if (dateReleaseError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@dateReleaseError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="ImageName" class="form-label">ImageName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="music.ImageName" />
        </div>
        <ValidationMessage For="@(() => music.ImageName)" />
        @if (imageNameError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@imageNameError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="ImagePath" class="form-label">ImagePath</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="music.ImagePath" />
        </div>
        <ValidationMessage For="@(() => music.ImagePath)" />
        @if (imagePathError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@imagePathError</p>
            </div>
        }
    </div>
    <div class="mb-3">
        <label for="AccessLevel" class="form-label">Access Level</label>
        <div class="col-md-4">
            <InputNumber class="form-control" Min="1" @bind-Value="music.AccessLevel" />
        </div>
        <ValidationMessage For="@(() => music.AccessLevel)" />
        @if (accessLevelError.Length > 0)
        {
            <div class="col-md-4" role="alert">
                <p class="alert alert-danger">@accessLevelError</p>
            </div>
        }
    </div>

    <div class="form-group" style="margin-bottom: 25px;">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";
    public MusicResponse music = new();

    private string accessLevelError = "";
    private string titleError = "";
    private string descriptionError = "";
    private string authorError = "";
    private string dateReleaseError =  "";
    private string imageNameError = "";
    private string imagePathError = "";

    protected override void OnInitialized() { }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            music = await MusicService.GetMusic(Id);
        }
    }

    protected async Task SaveMusic()
    {
        RequestResponse result = new RequestResponse();
        if (CheckFormValidation())
        {
            if (music.Id != 0)
            {
                result = await MusicService.UpdateMusic(music);
            }
            else
            {
                result = await MusicService.AddMusic(music);
            }
            if (result.Successful)
            {
                Cancel();
            }
        }
    }

    public void Cancel()
    {
        NavManager.NavigateTo("/admin/musics");
    }

    private bool CheckFormValidation()
    {
        var isValid = true;
        titleError = ""; descriptionError = ""; authorError = ""; accessLevelError = "";
        dateReleaseError =  ""; imageNameError = ""; imagePathError = "";

        if (music.Title == null || music.Title?.Trim().Length < 3)
        {
            titleError = "The title must contain at least 3 characters.";
            isValid = false;
        }
        if (music.Description == null || music.Description?.Trim().Length < 20)
        {
            descriptionError = "The description must contain at least 20 characters.";
            isValid = false;
        }
        if (music.Author == null || music.Author?.Trim().Length < 5)
        {
            authorError = "The author must contain at least 5 characters.";
            isValid = false;
        }
        if (music.DateRelease.Date.ToLocalTime() < new DateTime(1920, 1, 1))
        {
            dateReleaseError = "The date must be from present.";
            isValid = false;
        }
        if (music.ImageName == null || music.ImageName?.Trim().Length < 4)
        {
            imageNameError = "The image name must contain at least 4 characters.";
            isValid = false;
        }
        if (music.ImagePath == null || music.ImagePath?.Trim().Length < 4)
        {
            imagePathError = "The image path must contain at least 4 characters.";
            isValid = false;
        }
        if (music.AccessLevel <= 0)
        {
            accessLevelError = "The field must not be empty.";
            isValid = false;
        }

        return isValid;
    }
}
