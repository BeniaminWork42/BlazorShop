@page "/admin/users"

@attribute [Authorize(Policy = StringRoleResources.Admin)]

@inject IUserService UserService
@inject NavigationManager NavManager

<h1 class="display-3 font-weight-bold mb-0 text-primary mb-3">Users List</h1>

<div class="row mb-4">
    <div class="col">
        <MatButtonLink Href="admin/users/add" Raised="true">Add User</MatButtonLink>
    </div>
</div>

@if (usersList is null)
{
    <div class="d-flex justify-content-center" style="margin-top: 100px;">
        <h4 style="font-size: 45px;"><em>Loading the data...</em></h4>
    </div>
}
else
{
    @if (usersList.Count > 0)
    {
        <MatTable Items="@usersList" LoadInitialData="true" Striped="true" AllowSelection="true"
            RowClass="tester" FilterByColumnName="Email" DebounceMilliseconds="150" class="mat-elevation-z5">
            <MatTableHeader>
                <th>Id</th>
                <th>FirstName</th>
                <th>LastName</th>
                <th class="col-md-3">UserName</th>
                <th class="col-md-3">Email</th>
                <th>IsActive</th>
                <th class="col-md-6">Actions</th>
            </MatTableHeader>

            <MatTableRow>
                <td>@String.Format("{0:d}", @context.Id)</td>
                <td>@context.FirstName</td>
                <td>@context.LastName</td>
                <td class="col-md-3">@context.Username</td>
                <td class="col-md-3">@context.Email</td>
                <td>@context.IsActive</td>
                <td class="col-md-6">
                    <a href='admin/users/edit/@context.Id' class="btn btn-outline-dark" role="button">Edit</a>
                    <button class="btn btn-danger" @onclick="(() => { DeleteConfirm(context.Id); ModalShow(); })">
                        Delete
                    </button>
                </td>
            </MatTableRow>
        </MatTable>

        @if (showModal)
        {
            <div class="modal fade show" id="myModal" style="display:block; margin-top: 150px;" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Delete user</h3>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <h4>Do you want to de-activate this user's account?</h4>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" @onclick="(async () => {
                                await DeleteUser(user.Id); ModalOk();
                            })">Delete</button>
                            <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="d-flex justify-content-center" style="margin-top: 150px;">
            <h4 style="font-size: 45px;">No record found</h4>
        </div>
    }
}

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    protected UserResponse user = new();
    protected string SearchString { get; set; } = string.Empty;

    protected List<UserResponse> usersList { get; set; }
    protected List<UserResponse> searchUsersData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    protected async Task GetUsers()
    {
        usersList = await UserService.GetUsers();
        searchUsersData = usersList;
    }

    protected void FilterUsers()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            usersList = searchUsersData.Where(x => x.Email.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            usersList = searchUsersData;
        }
    }

    protected void DeleteConfirm(int Id)
    {
        user = usersList.FirstOrDefault(x => x.Id == Id);
    }

    protected async Task DeleteUser(int Id)
    {
        await UserService.DeleteUser(Id);
        await GetUsers();
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        usersList = searchUsersData;
    }
}

<style>
    label {
        width: 70%;
    }
</style>
