@page "/admin/users"

@attribute [Authorize(Policy = "Admin")]

@inject IUserService UserService
@inject NavigationManager NavManager

<h1>Users List</h1>

<div class="row">
    <div class="col-md-6">
        <a href='admin/users/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by email"
            @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUsers" />
        <div class="input-group-append" style="margin-left: 15px;">
            <button class="btn btn-primary btn-lg" @onclick="ResetSearch">
                <i class="fas fa-times"></i>
                Reset Filter
            </button>
        </div>
    </div>
</div>
<br />

@if (usersList is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (usersList.Count > 0)
    {
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
                <tr class="text-center">
                    <th>FirstName</th>
                    <th>LastName</th>
                    <th>UserName</th>
                    <th>Email</th>
                    <th>IsActive</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in usersList)
                {
                    <tr class="text-center">
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@user.IsActive</td>
                        <td>
                            <a href='admin/users/edit/@user.Id' class="btn btn-outline-dark" role="button">Edit</a>
                            <button class="btn btn-danger" @onclick="(() => { DeleteConfirm(user.Id); ModalShow(); })">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (showModal)
        {
            <div class="modal fade show" id="myModal" style="display:block; margin-top: 150px;" aria-modal="true" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Delete user</h3>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <h4>Do you want to de-activate this user's account?</h4>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger" @onclick="(async () => {
                                await DeleteUser(user.Id); ModalOk();
                            })">Delete</button>
                            <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="d-flex justify-content-center" style="margin-top: 150px;">
            <h4 style="font-size: 45px;">No record found</h4>
        </div>
    }
}

@code {
    bool showModal = false;

    void ModalShow() => showModal = true;
    void ModalCancel() => showModal = false;
    void ModalOk() => showModal = false;

    protected UserResponse user = new();
    protected string SearchString { get; set; } = string.Empty;

    protected List<UserResponse> usersList = new();
    protected List<UserResponse> searchUsersData = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
    }

    protected async Task GetUsers()
    {
        usersList = await UserService.GetUsers();
        searchUsersData = usersList;
    }

    protected void FilterUsers()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            usersList = searchUsersData.Where(x => x.Email.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            usersList = searchUsersData;
        }
    }

    protected void DeleteConfirm(int Id)
    {
        user = usersList.FirstOrDefault(x => x.Id == Id);
    }

    protected async Task DeleteUser(int Id)
    {
        await UserService.DeleteUser(Id);
        await GetUsers();
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        usersList = searchUsersData;
    }
}
