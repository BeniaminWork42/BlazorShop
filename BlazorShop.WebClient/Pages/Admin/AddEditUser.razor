@page "/admin/users/add"
@page "/admin/users/edit/{Id:int}"
@attribute [Authorize(Policy = "Admin")]

@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager NavManager

<h1>@Title User</h1>
<hr />

<EditForm Model="@User" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="FirstName" class="form-label">FirstName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="User.FirstName" />
        </div>
        <ValidationMessage For="@(() => User.FirstName)" />
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">LastName</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="User.LastName" />
        </div>
        <ValidationMessage For="@(() => User.LastName)" />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">Email</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="User.Email" />
        </div>
        <ValidationMessage For="@(() => User.Email)" />
    </div>
    <div class="mb-3">
        <label for="RoleName" class="form-label">RoleName</label>
        <div class="col-md-4">
            <InputSelect class="form-control" @bind-Value="User.RoleName">
                <option value="">-- Select Role Name --</option>
                @foreach (var role in roles)
                {
                    <option value="@role.Name">@role.Name</option>
                }
            </InputSelect>
        </div>
        <ValidationMessage For="@(() => User.RoleName)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";

    public UserResponse User = new();
    protected List<RoleResponse> roles = new();

    protected override async Task OnInitializedAsync()
    {
        roles = await RoleService.GetRoles();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            User = await UserService.GetUser(Id);
        }
    }

    protected async Task SaveUser()
    {
        if (User.Id != 0)
        {
            await UserService.UpdateUser(User);
        }
        else
        {
            await UserService.AddUser(User);
        }
        Cancel();
    }

    public void Cancel()
    {
        NavManager.NavigateTo("/admin/users");
    }
}
