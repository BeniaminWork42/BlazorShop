@page "/subscriptions"

@attribute [Authorize(Policy = "Customer")]

@inject AuthenticationStateProvider AuthStateProvider
@inject ISubscriberService SubscriberService
@inject NavigationManager NavManager

<h3>My Subscriptions</h3>

<main class="container">
    <div class="d-flex align-items-center p-3 my-3 text-white bg-purple rounded shadow-sm">
        <img class="me-3" src="images/subscriptions.png" alt="Receipts" width="58" height="38">
        <div class="lh-1">
            <h1 class="display-3 font-weight-bold mb-0 text-primary" style="margin-left: 30px;">My Subscriptions</h1>
        </div>
    </div>

    <div class="row">
        <div class="input-group col">
            <input type="text" class="form-control" placeholder="Search subscription by name"
                @bind="SearchString" @bind:event="oninput" @onkeyup="FilterSubscriptions" />
            <div class="input-group-append" style="margin-left: 15px;">
                <button class="btn btn-primary btn-lg" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                    Reset Filter
                </button>
            </div>
        </div>
    </div>

    <div class="container col-xxl-12 shadow-lg p-3 mb-5 bg-white rounded mt-5">
        <div class="row flex-lg-row align-items-center">
            <div class="col-md-3">
                <img src="images/basic_subscription.png" class="d-block img-fluid" alt="Bootstrap Themes" width="100" height="100" loading="lazy">
            </div>

            <div class="col-md-9" style="margin-left: -100px;">
                <h1 class="display-5 fw-bold lh-1 mb-3">Responsive left-aligned hero with image</h1>
                <p class="lead">Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.</p>
                <div class="d-grid gap-2 d-md-flex justify-content-md-start">
                    <button type="button" class="btn btn-primary btn-lg px-4 me-md-2">Primary</button>
                    <button type="button" class="btn btn-outline-secondary btn-lg px-4">Default</button>
                </div>
            </div>
        </div>
    </div>
</main>

<img src="images/basic_subscription.png" alt="" @ />
<img src="images/pro_subscription.png" alt="" @ />
<img src="images/enterprise_subscription.jpg" alt="" @ />


@code {
    private int UserId { get; set; }
    private string UserEmail { get; set; }

    protected string SearchString { get; set; } = string.Empty;
    private SubscriberResponse subscriptionActive = new();

    private List<SubscriberResponse> subscriptionsInactive = new();
    protected List<SubscriberResponse> searchSubscriptionsInactive = new();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        if (!user.Identity.IsAuthenticated) return;
        UserEmail = user.Claims.FirstOrDefault(x => x.Type == "email").Value;
        UserId = int.Parse(user.Claims.FirstOrDefault(x => x.Type == "UserId").Value);

        await GetUserSubscriptions(UserId, UserEmail);
        await GetActveSubscription(UserId);
    }

    public async Task GetActveSubscription(int userId)
    {
        subscriptionActive = await SubscriberService.GetUserSubscriber(userId);
    }

    public async Task GetUserSubscriptions(int userId, string userEmail)
    {
        subscriptionsInactive = await SubscriberService.GetUserAllSubscribers(userId);
        searchSubscriptionsInactive = subscriptionsInactive;
    }

    protected void FilterSubscriptions()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            subscriptionsInactive = searchSubscriptionsInactive.Where(x => x.SubscriptionName.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1).ToList();
        }
        else
        {
            subscriptionsInactive = searchSubscriptionsInactive;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        subscriptionsInactive = searchSubscriptionsInactive;
    }
}
